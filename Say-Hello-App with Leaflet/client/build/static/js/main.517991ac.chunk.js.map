{"version":3,"sources":["user_location.svg","message_location.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","myIcon","L","icon","iconUrl","userLocationUrl","iconSize","iconAnchor","popupAnchor","messageIcon","messageLocationUrl","schema","Joi","object","keys","name","string","invalid","regex","required","message","min","max","API_URL","window","location","hostname","App","state","lat","lng","haveUsersLocation","zoom","userMessage","sendingMessage","sentMessage","messages","formIsValid","_this","validate","error","formSubmitted","event","setState","preventDefault","fetch","method","headers","content-type","body","JSON","stringify","latitude","longitude","then","res","json","console","log","setTimeout","valueChanged","_event$target","target","value","prevState","Object","objectSpread","defineProperty","_this2","this","haveSeenLocation","reduce","all","key","concat","toFixed","otherMessages","push","navigator","geolocation","getCurrentPosition","position","coords","react_default","a","createElement","Map","className","center","TileLayer","attribution","url","Marker","map","_id","Popup","reactstrap_es","alt","src","align","width","height","margin","frameBorder","onSubmit","for","onChange","type","id","placeholder","disabled","color","Component","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.517991ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user_location.af70f583.svg\";","module.exports = __webpack_public_path__ + \"static/media/message_location.26bb8e3b.svg\";","import React, { Component } from 'react';\nimport L from 'leaflet';\nimport Joi from 'joi';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Card, Button, CardTitle, CardText, FormGroup } from 'reactstrap';\nimport { Form, Label, Input } from 'reactstrap';\nimport userLocationUrl from './user_location.svg'\nimport messageLocationUrl from './message_location.svg'\n\nimport './App.css';\n\nconst myIcon = L.icon({\n  iconUrl: userLocationUrl,\n  iconSize: [42, 82],\n  iconAnchor: [21, 82],\n  popupAnchor: [-5, -50]\n});\n\nconst messageIcon = L.icon({\n  iconUrl: messageLocationUrl,\n  iconSize: [42, 82],\n  iconAnchor: [21, 82],\n  popupAnchor: [-5, -50]\n});\n\nconst schema = Joi.object().keys({\n  name: Joi.string().invalid(null).regex(/^[a-zA-Z0-9]{1,30}/).required(),\n  message: Joi.string().invalid(null).min(5).max(100).required(),\n});\n\nconst API_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000/api/v1/messages' : 'production-url-here';\n\nclass App extends Component {\n  state = {\n    location: {\n      lat: 0,\n      lng: 0,\n    },\n    haveUsersLocation: false,\n    zoom: 2,\n    userMessage: {\n      name: '',\n      message: '',\n    },\n    sendingMessage: false,\n    sentMessage: false,\n    messages: [],\n  }\n\n  componentDidMount() {\n    fetch(API_URL)\n      .then(res => res.json())\n      .then(messages => {\n        const haveSeenLocation = {};\n        messages = messages.reduce((all, message) => {\n          const key = `${message.latitude.toFixed(4)}${message.longitude.toFixed(4)}`;\n          if(haveSeenLocation[key]) {\n            haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\n            haveSeenLocation[key].otherMessages.push(message);\n          }else{\n            haveSeenLocation[key] = message;\n            all.push(message);\n          }\n          return all;\n        }, []);\n        this.setState({\n          messages\n        });\n      });\n\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({\n        location: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        haveUsersLocation: true,\n        zoom: 13,\n      });\n    }, () => {\n      console.log('Problem with getting location');\n      fetch('https://ipapi.co/json')\n      .then( res => res.json()) \n      .then(location => {\n        this.setState({\n          location: {\n            lat: location.latitude,\n            lng: location.longitude\n          },\n          haveUsersLocation: true,\n          zoom: 13,\n        });\n      })\n    });\n  }\n\n  formIsValid = () => {\n    const userMessage = {\n      name: this.state.userMessage.name,\n      message: this.state.userMessage.message,\n    };\n    const result = Joi.validate(userMessage, schema);\n    \n    if(!result.error && this.state.haveUsersLocation){\n      return true;\n    }else return false;\n  }\n\n  formSubmitted = (event) => {\n    this.setState({\n      sendingMessage: true,\n    });\n    event.preventDefault();\n    if(this.formIsValid()) {\n      fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: this.state.userMessage.name,\n          message: this.state.userMessage.message,\n          latitude: this.state.location.lat,\n          longitude: this.state.location.lng,\n        })\n      }).then(res => res.json())\n      .then(message => {\n        console.log(message);\n        setTimeout(() => {\n          this.setState({\n            sendingMessage: false,\n            sentMessage: true,\n          });\n        }, 2000);\n      });\n    }\n  }\n\n  valueChanged = (event) => {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      userMessage: {\n        ...prevState.userMessage,\n        [name]: value,\n      }\n    }));\n  }\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng]\n    return (\n    <div>\n      <Map className=\"map\" center={position} zoom={this.state.zoom}>\n          <TileLayer\n            attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          { \n            this.state.haveUsersLocation ?\n            <Marker  \n              position={position}\n              icon={myIcon} >\n            </Marker> : ''\n          }\n          { this.state.messages.map(message => ( \n            <Marker  \n              key={ message._id }\n              position={ [message.latitude, message.longitude] }\n              icon={messageIcon}>\n              <Popup>\n                <p><em>{ message.name }: </em> { message.message }</p>\n                { message.otherMessages ? message.otherMessages.map(message => <p key={message._id}><em>{ message.name }: </em> { message.message }</p>) : '' }\n              </Popup>\n            </Marker>\n          ))}\n      </Map>\n    <Card body className=\"message-form\">\n      <CardTitle>Welcome to GuestMap!</CardTitle>\n      <CardText>Leave a message with your location!</CardText>\n      <CardText>Thanks for stopping by!</CardText>\n      { \n        !this.state.sendingMessage && !this.state.sentMessage && this.state.haveUsersLocation ?\n        <Form onSubmit={this.formSubmitted}>\n          <FormGroup>\n          <Label for=\"name\">Name</Label>\n          <Input \n           onChange={this.valueChanged}\n           type=\"text\" \n            name=\"name\" \n            id=\"name\" \n           placeholder=\"Enter your name\" />\n          </FormGroup>\n          <FormGroup>\n          <Label for=\"message\">Message</Label>\n         <Input \n           onChange={this.valueChanged}\n           type=\"textarea\" \n           name=\"message\" \n            id=\"message\" \n            placeholder=\"Enter your message\" />\n         </FormGroup>\n          <Button type=\"submit\" disabled={!this.formIsValid()} color=\"info\">Send</Button>\n        </Form> : \n        this.state.sendingMessage || !this.state.haveUsersLocation ? \n        <img alt='' \n        src=\"https://digitalsynopsis.com/wp-content/uploads/2016/06/loading-animations-preloader-gifs-ui-ux-effects-18.gif\" \n        align=\"center\" \n        width=\"200px\" \n        height=\"150px\" \n        margin=\"auto\"\n        frameBorder=\"0\"></img> :\n        <CardText>Thanks for leave Message!</CardText>\n      }\n      </Card>\n    </div>\n  \n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}